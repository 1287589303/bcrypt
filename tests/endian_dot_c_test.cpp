/*
 * This file is automatically generated by UnitTestBot. For further information see https://www.utbot.org
 */

#include "endian_dot_c_test.h"

#include "gtest/gtest.h"

namespace UTBot {


#pragma region regression
TEST(regression, swapEndian_test1)
{
    unsigned int actual = swapEndian(0U);
    EXPECT_EQ(0U, actual);
}

TEST(regression, testEndian_test1)
{
    char input[] = {'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '\0'};
    int actual = testEndian(input);
    EXPECT_EQ(1, actual);
    char expected_input[] = {'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '\0'};
    for (int it_144_0 = 0; it_144_0 < 10; it_144_0 ++) {
        EXPECT_EQ(expected_input[it_144_0], input[it_144_0]);
    }
}

TEST(regression, testEndian_test2)
{
    char input[] = {'T', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '\0'};
    int actual = testEndian(input);
    EXPECT_EQ(0, actual);
    char expected_input[] = {'T', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '\0'};
    for (int it_145_0 = 0; it_145_0 < 10; it_145_0 ++) {
        EXPECT_EQ(expected_input[it_145_0], input[it_145_0]);
    }
}

TEST(regression, swapCompressed_test1)
{
    char _input[2][2] = {{'c', '\0'}, {'c', 'c'}};
    char ** input = (char **) calloc(3, sizeof(char *));
    for (int it_146_0 = 0; it_146_0 < 2; it_146_0 ++) {
        input[it_146_0] = _input[it_146_0];
    }
    input[2] = NULL;
    int actual = swapCompressed(input, 3UL);
    EXPECT_EQ(0, actual);
    char expected_input[2][2] = {{'c', '\0'}, {'c', 'c'}};
    for (int it_147_0 = 0; it_147_0 < 2; it_147_0 ++) {
        for (int it_147_1 = 0; it_147_1 < 2; it_147_1 ++) {
            EXPECT_EQ(expected_input[it_147_0][it_147_1], _input[it_147_0][it_147_1]);
        }
    }
}

TEST(regression, swapCompressed_test2)
{
    char _input[2][2] = {{'b', 'h'}, {'b', 'c'}};
    char ** input = (char **) calloc(3, sizeof(char *));
    for (int it_148_0 = 0; it_148_0 < 2; it_148_0 ++) {
        input[it_148_0] = _input[it_148_0];
    }
    input[2] = NULL;
    int actual = swapCompressed(input, 4UL);
    EXPECT_EQ(1, actual);
    char expected_input[2][2] = {{'c', 'b'}, {'h', 'b'}};
    for (int it_149_0 = 0; it_149_0 < 2; it_149_0 ++) {
        for (int it_149_1 = 0; it_149_1 < 2; it_149_1 ++) {
            EXPECT_EQ(expected_input[it_149_0][it_149_1], _input[it_149_0][it_149_1]);
        }
    }
}

#pragma endregion
#pragma region error
// Error: memory error: out of bound pointer
TEST(error, getEndian_test1)
{
    unsigned char _e[2][2] = {{99, 99}, {99, 99}};
    unsigned char ** e = (unsigned char **) calloc(3, sizeof(unsigned char *));
    for (int it_143_0 = 0; it_143_0 < 2; it_143_0 ++) {
        e[it_143_0] = _e[it_143_0];
    }
    e[2] = NULL;
    getEndian(e);

    FAIL() << "Unreachable point or the function was supposed to fail, but "
        "actually completed successfully. See the SARIF report for details.";
}

// Error: memory error: out of bound pointer
TEST(error, swapCompressed_test3)
{
    char _input[2][2] = {{'c', 'c'}, {'c', 'c'}};
    char ** input = (char **) calloc(3, sizeof(char *));
    for (int it_150_0 = 0; it_150_0 < 2; it_150_0 ++) {
        input[it_150_0] = _input[it_150_0];
    }
    input[2] = NULL;
    swapCompressed(input, 10UL);

    FAIL() << "Unreachable point or the function was supposed to fail, but "
        "actually completed successfully. See the SARIF report for details.";
}

// Error: pointer-overflow
TEST(error, swapCompressed_test4)
{
    char _input[2][2] = {{'c', 'c'}, {'c', 'c'}};
    char ** input = (char **) calloc(3, sizeof(char *));
    for (int it_151_0 = 0; it_151_0 < 2; it_151_0 ++) {
        input[it_151_0] = _input[it_151_0];
    }
    input[2] = NULL;
    swapCompressed(input, 2UL);

    FAIL() << "Unreachable point or the function was supposed to fail, but "
        "actually completed successfully. See the SARIF report for details.";
}

#pragma endregion
}
