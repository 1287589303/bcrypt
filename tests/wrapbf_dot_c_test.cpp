/*
 * This file is automatically generated by UnitTestBot. For further information see https://www.utbot.org
 */

#include "wrapbf_dot_c_test.h"

#include "gtest/gtest.h"

namespace UTBot {


#pragma region error
// Error: memory error: out of bound pointer
TEST(error, BFEncrypt_test1)
{
    char _input[2][2] = {{'a', 'c'}, {'c', 'a'}};
    char ** input = (char **) calloc(3, sizeof(char *));
    for (int it_141_0 = 0; it_141_0 < 2; it_141_0 ++) {
        input[it_141_0] = _input[it_141_0];
    }
    input[2] = NULL;
    char key[] = {'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '\0'};
    struct _BCoptions options = {
        .remove = 99,
        .standardout = 99,
        .compression = 99,
        .type = 99,
        .origsize = 3UL,
        .securedelete = 99
    };
    BFEncrypt(input, key, 0UL, &options);

    FAIL() << "Unreachable point or the function was supposed to fail, but "
        "actually completed successfully. See the SARIF report for details.";
}

// Error: memory error: out of bound pointer
TEST(error, BFDecrypt_test1)
{
    char _input[2][2] = {{'T', 'c'}, {'c', 'a'}};
    char ** input = (char **) calloc(3, sizeof(char *));
    for (int it_142_0 = 0; it_142_0 < 2; it_142_0 ++) {
        input[it_142_0] = _input[it_142_0];
    }
    input[2] = NULL;
    char key[] = {'a', 'c', 'c', 'c', 'a', 'c', 'c', 'a', 'a', '\0'};
    char key2[] = {'a', 'c', 'c', 'c', 'a', 'c', 'c', 'a', 'c', '\0'};
    struct _BCoptions options = {
        .remove = 99,
        .standardout = 99,
        .compression = 99,
        .type = 99,
        .origsize = 3UL,
        .securedelete = 99
    };
    BFDecrypt(input, key, key2, 3UL, &options);

    FAIL() << "Unreachable point or the function was supposed to fail, but "
        "actually completed successfully. See the SARIF report for details.";
}

#pragma endregion
}
